package edu.whu.clock.newprobsearch;

import edu.whu.clock.generalsearch.SearchPath_ET;
import edu.whu.clock.newgraph.SummaryGraphTyped;
import edu.whu.clock.newprobindex.IndexedEdgeTyped;
/**
 * This class represents a path generated by searching on the summary graph, the edges of which are typed. 
 * @author clock
 * @since 2015/03/16
 * @version 0.1
 */
public class SearchPathTyped extends SearchPath_ET implements Comparable<SearchPathTyped> {

	private final double probability;
	
	public SearchPathTyped(short start, short type, boolean out, short end, double probability) {
		super(start, type, out, end);
		this.probability = probability;
	}
	
	public SearchPathTyped(IndexedEdgeTyped edge) {
		super(edge);
		this.probability = edge.getProb();
	}
	
	public SearchPathTyped(SearchPathTyped sp, short type, boolean out, short end, double probability) {
		super(sp, type, out, end);
		this.probability = sp.getProbability() * probability;
	}

	public double getProbability() {
		return probability;
	}

	@Override
	public int compareTo(SearchPathTyped sp) {
		double prob = sp.getProbability();
		if (probability < prob) 
			return 1;
		else if (probability == prob) 
			return 0;
		else 
			return -1;
	}
	
	public String getString(SummaryGraphTyped graph) {
		String str = getProbability() + "[";
		for (int i = 0; i < nodeNum() - 1; i++) {
			str += getNode(i)
					+ "."
					+ graph.classManager.getClassName(getNode(i));
			if (isOut(i)) {
				str += " -- " + getType(i) + "." + graph.etypeManager.getName(getType(i)) + "--> ";
			}
			else {
				str += " <--" + getType(i) + "." + graph.etypeManager.getName(getType(i))  + "-- ";
			}
		}
		str += getNode(nodeNum() - 1) + "."
				+ graph.classManager.getClassName(getNode(nodeNum() - 1)) + "]";
		return str;
	}
}
